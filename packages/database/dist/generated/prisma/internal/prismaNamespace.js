/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */
import * as runtime from "@prisma/client/runtime/library";
/**
 * Validator
 */
export const validator = runtime.Public.validator;
/**
 * Prisma Errors
 */
export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export const PrismaClientInitializationError = runtime.PrismaClientInitializationError;
export const PrismaClientValidationError = runtime.PrismaClientValidationError;
/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
export const prismaVersion = {
    client: "6.7.0",
    engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
};
export const NullTypes = {
    DbNull: runtime.objectEnumValues.classes.DbNull,
    JsonNull: runtime.objectEnumValues.classes.JsonNull,
    AnyNull: runtime.objectEnumValues.classes.AnyNull,
};
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;
export const ModelName = {
    EntityType: 'EntityType',
    FieldType: 'FieldType',
    ValidationType: 'ValidationType',
    FieldStatus: 'FieldStatus',
    FieldConfig: 'FieldConfig',
    Country: 'Country',
    Language: 'Language',
    Title: 'Title',
    Gender: 'Gender',
    FieldDefinition: 'FieldDefinition',
    FieldValidation: 'FieldValidation',
    EventStatus: 'EventStatus',
    UserStatus: 'UserStatus',
    VenueStatus: 'VenueStatus',
    User: 'User',
    Password: 'Password',
    Session: 'Session',
    Verification: 'Verification',
    Role: 'Role',
    Permission: 'Permission',
    Tenant: 'Tenant',
    Venue: 'Venue',
    Event: 'Event',
    Participant: 'Participant'
};
/**
 * Enums
 */
export const TransactionIsolationLevel = runtime.makeStrictEnum({
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
});
export const EntityTypeScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const FieldTypeScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const ValidationTypeScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const FieldStatusScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const FieldConfigScalarFieldEnum = {
    id: 'id',
    entityTypeId: 'entityTypeId',
    fieldTypeId: 'fieldTypeId',
    fieldName: 'fieldName',
    fieldLabel: 'fieldLabel',
    required: 'required',
    default: 'default',
    order: 'order',
    metadata: 'metadata',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const CountryScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    region: 'region',
    subregion: 'subregion',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const LanguageScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const TitleScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const GenderScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const FieldDefinitionScalarFieldEnum = {
    id: 'id',
    entityTypeId: 'entityTypeId',
    name: 'name',
    label: 'label',
    description: 'description',
    fieldTypeId: 'fieldTypeId',
    isRequired: 'isRequired',
    isUnique: 'isUnique',
    isSearchable: 'isSearchable',
    isFilterable: 'isFilterable',
    isSortable: 'isSortable',
    defaultValue: 'defaultValue',
    order: 'order',
    statusId: 'statusId',
    metadata: 'metadata',
    sourceId: 'sourceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const FieldValidationScalarFieldEnum = {
    id: 'id',
    fieldDefinitionId: 'fieldDefinitionId',
    validationTypeId: 'validationTypeId',
    value: 'value',
    message: 'message',
    order: 'order',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
export const EventStatusScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const UserStatusScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const VenueStatusScalarFieldEnum = {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    metadata: 'metadata',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const UserScalarFieldEnum = {
    id: 'id',
    email: 'email',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    userStatusId: 'userStatusId',
    countryId: 'countryId',
    languageId: 'languageId',
    titleId: 'titleId',
    genderId: 'genderId',
    tenantId: 'tenantId',
    failedLoginAttempts: 'failedLoginAttempts',
    lastFailedLoginAt: 'lastFailedLoginAt',
    lockedAt: 'lockedAt',
    lockReason: 'lockReason',
    lockCount: 'lockCount',
    autoUnlockAt: 'autoUnlockAt',
    lastLoginAt: 'lastLoginAt',
    metadata: 'metadata',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const PasswordScalarFieldEnum = {
    id: 'id',
    hash: 'hash',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    lastChanged: 'lastChanged',
    version: 'version'
};
export const SessionScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    expiresAt: 'expiresAt',
    metadata: 'metadata',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const VerificationScalarFieldEnum = {
    id: 'id',
    type: 'type',
    target: 'target',
    secret: 'secret',
    algorithm: 'algorithm',
    digits: 'digits',
    period: 'period',
    charSet: 'charSet',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const RoleScalarFieldEnum = {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const PermissionScalarFieldEnum = {
    id: 'id',
    action: 'action',
    entity: 'entity',
    access: 'access',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const TenantScalarFieldEnum = {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    city: 'city',
    state: 'state',
    countryId: 'countryId',
    address: 'address',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const VenueScalarFieldEnum = {
    id: 'id',
    name: 'name',
    description: 'description',
    contact: 'contact',
    phone: 'phone',
    email: 'email',
    address: 'address',
    city: 'city',
    state: 'state',
    country: 'country',
    capacity: 'capacity',
    longitude: 'longitude',
    latitude: 'latitude',
    amenities: 'amenities',
    metadata: 'metadata',
    statusId: 'statusId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const EventScalarFieldEnum = {
    id: 'id',
    name: 'name',
    description: 'description',
    tenantId: 'tenantId',
    eventStatusId: 'eventStatusId',
    startDate: 'startDate',
    endDate: 'endDate',
    venueId: 'venueId',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const ParticipantScalarFieldEnum = {
    id: 'id',
    eventId: 'eventId',
    firstName: 'firstName',
    lastName: 'lastName',
    titleId: 'titleId',
    genderId: 'genderId',
    nationalityId: 'nationalityId',
    languageId: 'languageId',
    status: 'status',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
};
export const SortOrder = {
    asc: 'asc',
    desc: 'desc'
};
export const NullableJsonNullValueInput = {
    DbNull: DbNull,
    JsonNull: JsonNull
};
export const QueryMode = {
    default: 'default',
    insensitive: 'insensitive'
};
export const JsonNullValueFilter = {
    DbNull: DbNull,
    JsonNull: JsonNull,
    AnyNull: AnyNull
};
export const NullsOrder = {
    first: 'first',
    last: 'last'
};
export const defineExtension = runtime.Extensions.defineExtension;
//# sourceMappingURL=prismaNamespace.js.map